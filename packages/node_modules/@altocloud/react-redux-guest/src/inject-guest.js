import React, {Component, PropTypes} from 'react';

import GuestComponent from './component';

function getDisplayName(C) {
  return C.displayName || C.name || `C`;
}

export default function injectGuest(WrappedComponent, options = {}) {
  const {
    withRef = false
  } = options;

  class InjectGuest extends Component {

    shouldComponentUpdate(nextProps) {
      return nextProps !== this.props;
    }

    getWrappedInstance() {
      // eslint-disable-next-line react/no-string-refs
      return this.refs.wrappedInstance;
    }

    render() {
      return (
        <div>
          <GuestComponent account={this.props.account} interaction={this.props.interaction} />
          <WrappedComponent
            {...this.props}
            ref={withRef ? `wrappedInstance` : null}
          />
        </div>
      );
    }
  }

  InjectGuest.propTypes = {
    account: PropTypes.object,
    interaction: PropTypes.object
  };

  InjectGuest.displayName = `InjectGuest(${getDisplayName(WrappedComponent)})`;
  InjectGuest.WrappedComponent = WrappedComponent;

  return InjectGuest;
}

