import {Component, PropTypes} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';

import {
  fetchGuestUser,
  updateGuestUserInteraction
} from './actions';

// TODO: if the accessToken is provided, we do not need to inject a guest account
// modify react-redux-guest to take accessToken params (colm.seale)
class GuestComponent extends Component {

  componentDidMount() {
    this.setupGuestUser(this.props);
  }

  componentWillReceiveProps(nextProps) {
    this.setupGuestUser(nextProps);
  }

  shouldComponentUpdate(nextProps) {
    const props = this.props;
    return nextProps.guest !== props.guest;
  }

  setupGuestUser(props) {
    const {
      account,
      guest,
      interaction
    } = props;

    if (account && account.id && !guest.get(`guest`) && !guest.getIn([`status`, `isFetchingGuest`])) {
      props.fetchGuestUser(account);
    }
    if (guest.get(`guest`) && !guest.getIn([`status`, `isFetchingGuest`]) && interaction) {
      props.updateGuestUserInteraction(account, guest.get(`guest`).sparkId, interaction);
    }
  }

  render() {
    return null;
  }
}

const injectedPropTypes = {
  fetchGuestUser: PropTypes.func,
  updateGuestUserInteraction: PropTypes.func,
  guest: PropTypes.object
};

GuestComponent.propTypes = {
  account: PropTypes.object,
  interaction: PropTypes.object,
  ...injectedPropTypes
};

export default connect(
  (state) => ({
    guest: state.guest
  }),
  (dispatch) => bindActionCreators({
    fetchGuestUser,
    updateGuestUserInteraction
  }, dispatch)
)(GuestComponent);
