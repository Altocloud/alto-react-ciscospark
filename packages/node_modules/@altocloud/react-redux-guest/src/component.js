import {Component, PropTypes} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';

import {
  fetchGuestUser,
  updateGuestUserInteraction
} from './actions';

class GuestComponent extends Component {

  constructor(props) {
    super(props);
    this.interactionUpdatedWithGuest = false;
  }


  componentDidMount() {
    this.setupGuestUser(this.props);
  }

  componentWillReceiveProps(nextProps) {
    this.setupGuestUser(nextProps);
  }

  shouldComponentUpdate(nextProps) {
    const props = this.props;
    return nextProps.guest !== props.guest;
  }

  setupGuestUser(props) {
    const {
      accessToken,
      account,
      guest,
      interaction,
      updateInteraction,
      openInteraction
    } = props;

    // if access token provided, skip
    if (!accessToken
      && account
      && account.id
      && !guest.get(`guest`)
      && !guest.getIn([`status`, `isFetchingGuest`])) {
      props.fetchGuestUser(account);
    }

    // only update guest user account with an interaction once
    if (!this.interactionUpdatedWithGuest
      && guest.get(`guest`)
      && !guest.getIn([`status`, `isFetchingGuest`])
      && interaction
      && updateInteraction
      && openInteraction) {

      this.interactionUpdatedWithGuest = true;
      const sparkId = guest.get(`guest`).sparkId;

      // possible issue, why isn't this action then-able? possible race condition with other users.
      props.updateGuestUserInteraction(account, sparkId, interaction);
      updateInteraction(interaction.id, {
        provider: {
          type: `spark`,
          sid: sparkId
        }
      }).then(() => openInteraction(interaction));
    }
  }

  render() {
    return null;
  }
}

const injectedPropTypes = {
  fetchGuestUser: PropTypes.func,
  updateGuestUserInteraction: PropTypes.func,
  guest: PropTypes.object
};

GuestComponent.propTypes = {
  accessToken: PropTypes.string,
  account: PropTypes.object,
  interaction: PropTypes.object,
  openInteraction: PropTypes.func,
  updateInteraction: PropTypes.func,
  ...injectedPropTypes
};

export default connect(
  (state) => ({
    guest: state.guest
  }),
  (dispatch) => bindActionCreators({
    fetchGuestUser,
    updateGuestUserInteraction
  }, dispatch)
)(GuestComponent);
