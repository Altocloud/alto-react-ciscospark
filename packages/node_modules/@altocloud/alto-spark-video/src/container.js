/* eslint-disable react/no-set-state */
import React, {Component, PropTypes} from 'react';
import {connect} from 'react-redux';
import {IntlProvider} from 'react-intl';
import messages from './locales/en';

import classNames from 'classnames';
import {MessageMeetComponent} from '@altocloud/widget-customer-video';
import LoadingScreen from '@ciscospark/react-component-loading-screen';

import {injectGuest} from '@altocloud/react-redux-guest';

import styles from './styles.css';

class AltoSparkVideo extends Component {
  constructor(props) {
    super(props);
    const l = window.location;
    const redirectUri = `${l.protocol}//${l.host}${l.pathname}`.replace(/\/$/, ``);
    const clientId = process.env.CISCOSPARK_CLIENT_ID;
    const clientSecret = process.env.CISCOSPARK_CLIENT_SECRET;
    this.state = {
      accessToken: props.accessToken || null,
      refreshToken: props.refreshToken || null,
      authenticate: false,
      running: false,
      clientId,
      clientSecret,
      scope: `spark:kms spark:rooms_read spark:rooms_write spark:memberships_read spark:memberships_write spark:messages_read spark:messages_write`,
      redirectUri
    };
  }

  shouldComponentUpdate() {
    return true;
  }

  getLoadingMessage() {
    if (!this.props.interaction) {
      return `Waiting for Interaction Details`;
    }
    else if (this.props.interaction.state === `closed`) {
      return `Interaction has been closed by the agent, please start a new interaction`;
    }
    else if (!this.state.accessToken && !this.props.guest.getIn([`guest`, `accessToken`])) {
      return `Authenticating`;
    }
    return `Starting Cisco Spark`;
  }

  render() {
    const loadingMessage = this.getLoadingMessage();

    console.log('I am called');
    const accessToken = this.state.accessToken || this.props.guest.getIn([`guest`, `accessToken`]);
    const refreshToken = this.state.refreshToken || this.props.guest.getIn([`guest`, `refreshToken`]);

    if (accessToken) {
      return (
        <IntlProvider locale={`en`} messages={messages}>
          <div className={classNames(`widget-component-container`, styles.widgetComponentContainer)}>
            <MessageMeetComponent
              accessToken={accessToken}
              closeInteraction={this.props.closeInteraction}
              interaction={this.props.interaction}
              openInteraction={this.props.openInteraction}
              refreshToken={refreshToken}
              toPersonEmail={this.props.toPersonEmail}
              updateInteraction={this.props.updateInteraction}
            />
          </div>
        </IntlProvider>);
    }
    return (
      <div className={classNames(`widget-component-container`, styles.widgetComponentContainer)}>
        <LoadingScreen loadingMessage={loadingMessage} />
      </div>);
  }
}

const injectedPropTypes = {
  guest: PropTypes.object.isRequired
};

AltoSparkVideo.propTypes = {
  accessToken: PropTypes.string,
  closeInteraction: PropTypes.func,
  interaction: PropTypes.object,
  openInteraction: PropTypes.func,
  refreshToken: PropTypes.string,
  toPersonEmail: PropTypes.string,
  updateInteraction: PropTypes.func,
  ...injectedPropTypes
};

AltoSparkVideo.title = `Altocloud Customer Video`;
AltoSparkVideo.path = `/wmm-demo`;

function mapStateToProps(state) {
  return {
    guest: state.guest
  };
}

export default connect(mapStateToProps, () => ({}))(injectGuest(AltoSparkVideo));

