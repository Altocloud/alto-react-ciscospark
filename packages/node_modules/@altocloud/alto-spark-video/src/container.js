/* eslint-disable react/no-set-state */
import React, {Component, PropTypes} from 'react';
import {IntlProvider} from 'react-intl';
import messages from './locales/en';

import classNames from 'classnames';
import SparkGuest from '@altocloud/spark-guest';
import WidgetCustomerVideo from '@altocloud/widget-customer-video';
import LoadingScreen from '@ciscospark/react-component-loading-screen';

import styles from './styles.css';

class AltoSparkVideoComponent extends Component {
  constructor(props) {
    super(props);
    const l = window.location;
    const redirectUri = `${l.protocol}//${l.host}${l.pathname}`.replace(/\/$/, ``);
    const clientId = process.env.CISCOSPARK_CLIENT_ID;
    const clientSecret = process.env.CISCOSPARK_CLIENT_SECRET;
    this.state = {
      authenticate: false,
      running: false,
      clientId,
      clientSecret,
      scope: `spark:kms spark:rooms_read spark:rooms_write spark:memberships_read spark:memberships_write spark:messages_read spark:messages_write`,
      redirectUri
    };
  }

  componentWillMount() {
    // this.sparkGuest.getFreeUser().then((data) => {
    //   this.setState({
    //     accessToken: data.accessToken,
    //     refreshToken: data.refreshToken
    //   });
    // });
    this.setState({
      accessToken: `NWJkNzgxZTUtZDAxYy00ODYyLThkZjMtNDJjNDNkYmIzM2NjNjQ1MGY3MmYtYzhl`,
      refreshToken: `ODllYjdiMDYtMWM3NS00NGE1LTg5YmEtOTM4N2U5MDIyNDM2Yzg1ZDgzMzAtN2E0`
    });
  }

  shouldComponentUpdate() {
    return true;
  }

  componentWillReceiveProps(nextProps) {
    const {account} = nextProps;
    if (nextProps.account) {
      this.sparkGuest = this.sparkGuest || new SparkGuest(account.id);
    }
  }

  getLoadingMessage() {
    if (!this.props.account) {
      return `Getting Account Details`;
    }
    else if (!this.props.interaction) {
      return `Getting Interaction Details`;
    }
    else if (!this.state.accessToken) {
      return `Authenticating`;
    }
    return `Loading`;
  }

  render() {
    const loadingMessage = this.getLoadingMessage();

    if (this.state.accessToken && this.state.refreshToken && this.props.account && this.props.interaction) {
      return (
        <IntlProvider locale={`en`} messages={messages}>
          <div className={classNames(`widget-component-container`, styles.widgetComponentContainer)}>
            <WidgetCustomerVideo
              accessToken={this.state.accessToken}
              closeInteraction={this.props.closeInteraction}
              interaction={this.props.interaction}
              openInteraction={this.props.openInteraction}
              refreshToken={this.state.refreshToken}
              updateInteraction={this.props.updateInteraction}
            />
          </div>
        </IntlProvider>);
    }
    return (
      <div className={classNames(`widget-component-container`, styles.widgetComponentContainer)}>
        <LoadingScreen loadingMessage={loadingMessage} />
      </div>);
  }
}

AltoSparkVideoComponent.propTypes = {
  account: PropTypes.object,
  closeInteraction: PropTypes.func.isRequired,
  interaction: PropTypes.object,
  openInteraction: PropTypes.func.isRequired,
  updateInteraction: PropTypes.func.isRequired
};

AltoSparkVideoComponent.title = `Altocloud Customer Video`;
AltoSparkVideoComponent.path = `/wmm-demo`;

export default AltoSparkVideoComponent;
