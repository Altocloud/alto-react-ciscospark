import axios from 'axios';

const CISCO_SPARK_URL = [`https://`, document.location.host.split(`.`)[0], `.altocloud.com/api/cisco-spark`].join(``);
const GET_FREE_GUEST_ENDPOINT = `/guests/states/free`;
const PATCH_GUEST_ENDPOINT = `/guests/`;

const ciscoGuestApi = axios.create({
  baseURL: CISCO_SPARK_URL
});

class SparkGuest {
  constructor(account) {
    this.account = account;
  }

  getFreeUser() {
    // in development on localhost, we should just use hard coded tokens
    if (process.env.NODE_ENV === `development`) {
      return {
        then: (callback) => {
          callback({
            accessToken: `NWJkNzgxZTUtZDAxYy00ODYyLThkZjMtNDJjNDNkYmIzM2NjNjQ1MGY3MmYtYzhl`,
            refreshToken: `ODllYjdiMDYtMWM3NS00NGE1LTg5YmEtOTM4N2U5MDIyNDM2Yzg1ZDgzMzAtN2E0`
          });
        }
      };
    }

    return ciscoGuestApi.get(GET_FREE_GUEST_ENDPOINT, {
      params: {
        account: this.account
      }
    }).then((response) => response.data);
  }

  setUserAsBusy(account, sparkId, interaction) {
    // in development on localhost, we should just use hard coded tokens
    if (process.env.NODE_ENV === `development`) {
      return {
        then: (callback) => {
          callback();
        }
      };
    }

    return ciscoGuestApi.patch(PATCH_GUEST_ENDPOINT + sparkId, {
      data: {
        account,
        interaction
      }
    });
  }
}

export default SparkGuest;
