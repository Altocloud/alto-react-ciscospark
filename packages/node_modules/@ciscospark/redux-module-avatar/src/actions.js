export const ADD_AVATAR = `avatar/ADD_AVATAR`;
export const ADD_AVATAR_BEGIN = `avatar/ADD_AVATAR_BEGIN`;

import {bufferToBlob} from '@ciscospark/react-component-utils';

function addAvatar(id, avatar) {
  return {
    type: ADD_AVATAR,
    payload: {
      id,
      avatar
    }
  };
}

function addAvatarBegin(id) {
  return {
    type: ADD_AVATAR_BEGIN,
    payload: {
      id
    }
  };
}

/**
 * Fetches a group of users' avatars
 * @param {Array} userIds
 * @param {object} spark
 * @returns {Thunk}
 */
export function fetchAvatarsForUsers(userIds, spark) {
  const promises = [];
  return (dispatch) => {
    userIds.forEach((userId) => {
      promises.push(dispatch(fetchAvatar({userId}, spark)));
    });
    return Promise.all(promises);
  };
}

/**
 * Fetches an avatar for a given space or user id
 * @param {Object} params
 * @param {Object} params.space
 * @param {String} params.userId
 * @param {Object} spark
 * @returns {Thunk}
 */
export function fetchAvatar({space, userId}, spark) {
  return (dispatch, getState) => {
    const avatar = getState().avatar;
    const avatarId = space ? space.id : userId;
    const fetched = avatar.hasIn([`items`, avatarId]);
    const fetching = avatar.hasIn([`avatarsInFlight`, avatarId]);

    if (fetched || fetching) {
      return Promise.resolve();
    }

    dispatch(addAvatarBegin(avatarId));

    if (space) {
      return fetchSpaceAvatar(space, spark, userId)
        .then(({id, objectUrl}) => {
          dispatch(addAvatar(id, objectUrl));
        });
    }
    return fetchUserAvatar(userId, spark)
      .then(({id, objectUrl}) => {
        dispatch(addAvatar(id, objectUrl));
      });
  };
}

function fetchUserAvatar(userId, spark) {
  return spark.people.get(userId)
    .then((person) => Promise.resolve({id: userId, objectUrl: person.avatar}))
    .catch(() => Promise.resolve({id: userId}));
}

function fetchSpaceAvatar(space, spark, userIdForAvatar) {
  if (space.type === `direct`) {
    if (!userIdForAvatar) {
      return Promise.reject(new Error(`Direct spaces require a user id to display`));
    }
    return fetchUserAvatar(userIdForAvatar, spark);
  }
  if (space.avatar) {
    return spark.internal.conversation.download(space.avatar.files.items[0])
      .then((file) => {
        const {objectUrl} = bufferToBlob(file);
        return Promise.resolve({id: space.id, objectUrl});
      });
  }
  return Promise.resolve({id: space.id});
}
