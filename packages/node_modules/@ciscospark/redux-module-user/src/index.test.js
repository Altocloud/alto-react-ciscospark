/* eslint-disable max-nested-callbacks */
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

import {initialState} from '.';
import * as actions from '.';

let mockSpark, store, user;

describe(`redux-module-user actions `, () => {
  beforeEach(() => {
    store = mockStore(initialState);

    user = {
      id: `Y2lzY29zcGFyazovL3VzZXJJZA==`
    };

    mockSpark = {
      internal: {
        user: {
          get: jest.fn(() => Promise.resolve(user))
        }
      },
      people: {
        get: jest.fn(() => Promise.resolve(user)),
        list: jest.fn(() => Promise.resolve({
          items: [
            user
          ]
        }))
      }
    };
  });

  it(`has exported actions`, () => {
    expect(actions.fetchCurrentUser).toBeDefined();
    expect(actions.fetchToUser).toBeDefined();
  });


  describe(`#fetchCurrentUser`, () => {
    it(`can successfully fetch current user`, () => {
      store.dispatch(actions.fetchCurrentUser(mockSpark)).then(() => {
        expect(mockSpark.internal.user.get).toHaveBeenCalled();
        expect(store.getActions()).toMatchSnapshot();
      });
    });
  });

  describe(`#fetchToUser`, () => {
    it(`can successfully fetch user with email`, () => {
      store.dispatch(actions.fetchToUser({toPersonEmail: `person@email.com`}, mockSpark))
        .then(() => {
          expect(mockSpark.people.list).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });

    it(`can successfully fetch user with id`, () => {
      store.dispatch(actions.fetchToUser({toPersonId: `personId`}, mockSpark))
        .then(() => {
          expect(mockSpark.people.get).toHaveBeenCalled();
          expect(store.getActions()).toMatchSnapshot();
        });
    });

    it(`fails to fetch user with no query`, () => {
      store.dispatch(actions.fetchToUser({}, mockSpark))
        .catch((e) => {
          expect(e).toMatch(`error`);
          expect(store.getActions()).toMatchSnapshot();
        });
    });

  });


});
