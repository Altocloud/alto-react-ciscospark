/**
 * This module should be refactored to extend react-redux-spark instead of being standalone
 */

import {fromJS} from 'immutable';

import {fetchFreeGuest, setAsBusy} from './guest';

export const GET_GUEST = `guest/GET_GUEST`;
export const GET_GUEST_BEGIN = `guest/GET_GUEST_BEGIN`;
export const UPDATE_GUEST = `guest/UPDATE_GUEST`;

export const initialState = fromJS({
  guest: null,
  status: {
    isFetchingGuest: false
  }
});

export default function reducer(state = initialState, action) {
  switch (action.type) {

  case GET_GUEST_BEGIN:
    return state.setIn([`status`, `isFetchingGuest`], action.payload.isFetchingGuest);
  case GET_GUEST:
    return state.mergeDeep({
      status: {
        isFetchingGuest: action.payload.isFetchingGuest
      },
      guest: action.payload.guest
    });
  case UPDATE_GUEST:
    return state.setIn([`guest`, `interaction`], action.payload.patch.interaction);
  default:
    return state;
  }
}

function getGuest(guest) {
  return {
    type: GET_GUEST,
    payload: {
      isFetching: false,
      guest
    }
  };
}

function getGuestBegin() {
  return {
    type: GET_GUEST_BEGIN,
    payload: {
      isFetching: true
    }
  };
}

function updateGuest(patch) {
  return {
    type: UPDATE_GUEST,
    payload: {
      patch
    }
  };
}

export function fetchGuest(account) {
  return (dispatch) => {
    dispatch(getGuestBegin());
    fetchFreeGuest(account).then((guest) => {
      dispatch(getGuest(guest));
    });
  };
}

export function updateGuestInteraction(account, sparkId, interaction) {
  return (dispatch) => {
    setAsBusy(account, sparkId, interaction).then(() => {
      dispatch(updateGuest({interaction}));
    });
  };
}
