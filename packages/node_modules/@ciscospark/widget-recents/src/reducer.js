import {fromJS} from 'immutable';
import mercury from '@ciscospark/redux-module-mercury';
import user from '@ciscospark/redux-module-user';
import spaces from '@ciscospark/redux-module-spaces';
import errors from '@ciscospark/redux-module-errors';
import avatar from '@ciscospark/redux-module-avatar';

import {
  UPDATE_STATUS,
  STORE_INCOMING_CALL,
  DELETE_INCOMING_CALL,
  UPDATE_WEBRTC_SUPPORT
} from './actions';

export const initialState = fromJS({
  incomingCall: null,
  status: {
    isListeningForNewActivity: false,
    isListeningForCalls: false,
    hasCheckedWebRTCSupport: false,
    hasWebRTCSupport: false
  }
});

export function reducer(state = initialState, action) {
  switch (action.type) {
  case STORE_INCOMING_CALL:
    return state.set(`incomingCall`, action.payload.call);
  case DELETE_INCOMING_CALL:
    return state.set(`incomingCall`, null);
  case UPDATE_STATUS:
    return state.mergeIn([`status`], action.payload.status);
  case UPDATE_WEBRTC_SUPPORT:
    return state.setIn([`status`, `hasWebRTCSupport`], action.payload.support);
  default:
    return state;
  }
}

const reducers = {
  avatar,
  user,
  mercury,
  spaces,
  errors,
  widgetRecents: reducer
};

export default reducers;
