/* eslint-disable max-nested-callbacks */
import configureMockStore from 'redux-mock-store';
import thunk from 'redux-thunk';

const middlewares = [thunk];
const mockStore = configureMockStore(middlewares);

const mockSpark = {
  request: jest.fn(() => Promise.resolve({body: {}})),
  internal: {
    mercury: {
      on: jest.fn(),
      off: jest.fn()
    }
  }
};

const statusList = [
  {
    url: `https://apheleia-a.wbx2.com/apheleia/api/v1?userId=THE-USER-ID`,
    subject: `THE-USER-ID`,
    status: `active`,
    statusTime: `2017-06-02T19:38:16.029Z`,
    lastActive: `2017-06-02T19:43:25.490Z`,
    expiresTTL: 357,
    vectorCounters: {},
    suppressNotifications: false,
    lastSeenDeviceUrl: `https://wdm-a.wbx2.com/wdm/api/v1/devices/THE-DEVICE-ID`,
    expires: `2017-06-02T19:53:25.490Z`,
    expiresTime: `2017-06-02T19:53:25.490Z`
  }
];

import * as actions from './actions';

describe.only(`redux-module-presence actions`, () => {
  it(`has exported actions`, () => {
    expect(actions.setUserStatus).toBeDefined();
    expect(actions.getCurrentStatus).toBeDefined();
    expect(actions.subscribeToUpdates).toBeDefined();
    expect(actions.unsubscribeFromUpdates).toBeDefined();
  });

  it(`can set user status`, () => {
    const store = mockStore({});
    return store.dispatch(actions.setUserStatus(`abc-123`, `dnd`, 60, mockSpark))
      .then(() => {
        expect(store.getActions()).toMatchSnapshot();
      });
  });

  it(`can get user status`, () => {
    const store = mockStore({});
    mockSpark.request = jest.fn(() => Promise.resolve({body: {statusList}}));
    return store.dispatch(actions.getCurrentStatus([`abc-123`], mockSpark))
      .then(() => {
        expect(store.getActions()).toMatchSnapshot();
      });
  });

  it(`can subscribe to updates`, () => {
    const store = mockStore({});
    mockSpark.request = jest.fn(() => Promise.resolve({body: {responses: statusList}}));
    return store.dispatch(actions.subscribeToUpdates([`abc-123`], mockSpark))
      .then(() => {
        expect(store.getActions()).toMatchSnapshot();
      });
  });

  it(`can unsubscribe from updates`, () => {
    const store = mockStore({});
    return store.dispatch(actions.unsubscribeFromUpdates([`abc-123`], mockSpark))
      .then(() => {
        expect(store.getActions()).toMatchSnapshot();
      });
  });
});
