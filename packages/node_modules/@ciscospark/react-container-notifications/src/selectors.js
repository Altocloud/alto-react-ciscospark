import {createSelector} from 'reselect';

import {NOTIFICATION_TYPE_OTHER, NOTIFICATION_TYPE_POST} from './actions';

const getActivities = (state) => state.conversation.get(`activities`); // eslint-disable-line func-style
const getNotifications = (state) => state.notifications.get(`items`); // eslint-disable-line func-style
const getNotificationSettings = (state) => state.notifications.get(`settings`); // eslint-disable-line func-style
const getAvatars = (state) => state.avatar.get(`items`).toJS(); // eslint-disable-line func-style

const getUnsentNotifications = createSelector(
  [getActivities, getNotifications, getAvatars],
  (activities, notifications, avatars) =>
    notifications
      .map((notification) => {
        if (notification.type === NOTIFICATION_TYPE_POST) {
          const notificationActivity = findActivityWithUrl(activities, notification.notificationId);
          return Object.assign({}, notification, {
            username: notificationActivity.actor.displayName,
            message: notificationActivity.object.displayName,
            avatar: avatars[notificationActivity.actor.id]
          });
        }
        else if (notification.type === NOTIFICATION_TYPE_OTHER) {
          const {username, message, avatar} = notification.details;
          return Object.assign({}, notification, {
            username,
            message,
            avatar
          });
        }
        return notification;
      })
);

export const getNotificationDetails = createSelector(
  [getNotificationSettings, getUnsentNotifications],
  (notificationSettings, unsentNotifications) => ({
    isSupported: notificationSettings.get(`isSupported`),
    notifications: unsentNotifications,
    permission: notificationSettings.get(`permission`)
  })
);

function findActivityWithUrl(activities, url) {
  return activities.find((activity) => activity.url === url);
}
