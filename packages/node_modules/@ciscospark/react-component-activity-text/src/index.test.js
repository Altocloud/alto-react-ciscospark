/* eslint-disable max-nested-callbacks */
import React from 'react';
import renderer from 'react-test-renderer';

import ActivityText from '.';

describe(`ActivityText component`, () => {
  const displayName = `Test Text`;
  const displayNameWithUrl = `Testing google google.com http://google.com`;
  const linkText = `<a href="http://www.link.com">Link</a>`;
  const cleanContent = `<em>Test Text</em>`;
  const htmlWithUnlinked = `<pre>GOOGLE!</pre> google.com`;
  const dirtyContent = `<script>alert('dirtyContent')</script>`;

  it(`renders clean text properly`, () => {
    const component = renderer.create(
      <ActivityText displayName={displayName} />
    );
    expect(component).toMatchSnapshot();
  });

  it(`renders links from plaintext`, () => {
    const component = renderer.create(
      <ActivityText displayName={displayNameWithUrl} />
    );
    expect(component).toMatchSnapshot();
  });

  it(`renders clean dangerous text properly`, () => {
    const component = renderer.create(
      <ActivityText content={cleanContent} />
    );
    expect(component).toMatchSnapshot();
  });

  it(`renders dirty dangerous text properly`, () => {
    const component = renderer.create(
      <ActivityText content={dirtyContent} />
    );
    expect(component).toMatchSnapshot();
  });

  describe(`with links needing to be linkified`, () => {
    it(`renders links from plaintext`, () => {
      const component = renderer.create(
        <ActivityText displayName={displayNameWithUrl} />
      );
      expect(component).toMatchSnapshot();
    });

    it(`renders links not encoded from the server`, () => {
      const component = renderer.create(
        <ActivityText content={htmlWithUnlinked} />
      );
      expect(component).toMatchSnapshot();
    });
  });

  it(`doesn't change links encoded from the server`, () => {
    const component = renderer.create(
      <ActivityText content={linkText} />
    );
    expect(component).toMatchSnapshot();
  });
});
